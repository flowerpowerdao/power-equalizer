type WhitelistSpotId = text;
type WhitelistSlot = 
 record {
   end: Time;
   start: Time;
 };
type Whitelist = 
 record {
   addresses: vec AccountIdentifier;
   endTime: opt Time;
   name: text;
   oneTimeOnly: bool;
   price: nat64;
   startTime: Time;
 };
type User = 
 variant {
   address: AccountIdentifier__1;
   "principal": principal;
 };
type UpdateInformationRequest = record {
                                  metrics: opt CollectMetricsRequestType;};
type UpdateCallsAggregatedData = vec nat64;
type TransferResponse = 
 variant {
   err:
    variant {
      CannotNotify: AccountIdentifier__1;
      InsufficientBalance;
      InvalidToken: TokenIdentifier;
      Other: text;
      Rejected;
      Unauthorized: AccountIdentifier__1;
    };
   ok: Balance;
 };
type TransferRequest = 
 record {
   amount: Balance;
   from: User;
   memo: Memo;
   notify: bool;
   subaccount: opt SubAccount;
   to: User;
   token: TokenIdentifier;
 };
type TransactionV2 = 
 record {
   buyer: AccountIdentifier__2;
   buyerFrontend: opt text;
   price: nat64;
   seller: principal;
   sellerFrontend: opt text;
   time: Time__1;
   token: TokenIdentifier__1;
 };
type Transaction = 
 record {
   buyer: AccountIdentifier__2;
   buyerFrontend: opt text;
   price: nat64;
   seller: principal;
   sellerFrontend: opt text;
   time: Time__1;
   token: TokenIdentifier__1;
 };
type TokenIndex__4 = nat32;
type TokenIndex__3 = nat32;
type TokenIndex__2 = nat32;
type TokenIndex__1 = nat32;
type TokenIndex = nat32;
type TokenIdentifier__3 = text;
type TokenIdentifier__2 = text;
type TokenIdentifier__1 = text;
type TokenIdentifier = text;
type Time__2 = int;
type Time__1 = int;
type Time = int;
type SubAccount__3 = vec nat8;
type SubAccount__2 = vec nat8;
type SubAccount__1 = vec nat8;
type SubAccount = vec nat8;
type StatusResponse = 
 record {
   cycles: opt nat64;
   heap_memory_size: opt nat64;
   memory_size: opt nat64;
 };
type StatusRequest = 
 record {
   cycles: bool;
   heap_memory_size: bool;
   memory_size: bool;
 };
type StableChunk__6 = opt
                       variant {
                         v1:
                          record {
                            nextTokenId: TokenIndex__4;
                            owners:
                             vec
                              record {
                                AccountIdentifier__7;
                                vec TokenIndex__4;
                              };
                            registry:
                             vec record {
                                   TokenIndex__4;
                                   AccountIdentifier__7;
                                 };
                            supply: Balance__2;
                            tokenMetadata:
                             vec record {
                                   TokenIndex__4;
                                   Metadata;
                                 };
                          };};
type StableChunk__5 = opt variant {v1: record {isShuffled: bool;};};
type StableChunk__4 = 
 opt
  variant {
    v1:
     record {
       failedSales: vec record {
                          AccountIdentifier__5;
                          SubAccount__1;
                        };
       nextSubAccount: nat;
       saleTransactionChunk: vec SaleTransaction;
       saleTransactionCount: nat;
       salesSettlements: vec record {
                               AccountIdentifier__5;
                               SaleV1;
                             };
       sold: nat;
       soldIcp: nat64;
       tokensForSale: vec TokenIndex__2;
       totalToSell: nat;
       whitelist: vec record {
                        nat64;
                        AccountIdentifier__5;
                        WhitelistSlot;
                      };
     };
    v1_chunk: record {saleTransactionChunk: vec SaleTransaction;};
    v2:
     record {
       failedSales: vec record {
                          AccountIdentifier__5;
                          SubAccount__1;
                        };
       nextSubAccount: nat;
       saleTransactionChunk: vec SaleTransaction;
       saleTransactionCount: nat;
       salesSettlements: vec record {
                               AccountIdentifier__5;
                               Sale;
                             };
       sold: nat;
       soldIcp: nat64;
       tokensForSale: vec TokenIndex__2;
       totalToSell: nat;
       whitelistSpots: vec record {
                             WhitelistSpotId;
                             RemainingSpots;
                           };
     };
    v2_chunk: record {saleTransactionChunk: vec SaleTransaction;};
  };
type StableChunk__3 = 
 opt
  variant {
    v1:
     record {
       frontends: vec record {
                        text;
                        Frontend;
                      };
       tokenListing: vec record {
                           TokenIndex__1;
                           Listing;
                         };
       tokenSettlement: vec record {
                              TokenIndex__1;
                              Settlement;
                            };
       transactionChunk: vec Transaction;
       transactionCount: nat;
     };
    v1_chunk: record {transactionChunk: vec Transaction;};
    v2:
     record {
       tokenListing: vec record {
                           TokenIndex__1;
                           Listing;
                         };
       tokenSettlement: vec record {
                              TokenIndex__1;
                              Settlement;
                            };
       transactionChunk: vec TransactionV2;
       transactionCount: nat;
     };
    v2_chunk: record {transactionChunk: vec TransactionV2;};
  };
type StableChunk__2 = opt
                       variant {
                         v1: record {disbursements: vec Disbursement;};};
type StableChunk__1 = 
 opt
  variant {
    v2:
     record {
       assetsChunk: vec AssetV2;
       assetsCount: nat;
       placeholder: AssetV2;
     };
    v2_chunk: record {assetsChunk: vec AssetV2;};
    v3:
     record {
       assetsChunk: vec AssetV2;
       assetsCount: nat;
       isShuffled: bool;
       placeholder: AssetV2;
     };
    v3_chunk: record {assetsChunk: vec AssetV2;};
  };
type StableChunk = 
 variant {
   v1:
    record {
      assets: StableChunk__1;
      disburser: StableChunk__2;
      marketplace: StableChunk__3;
      sale: StableChunk__4;
      shuffle: StableChunk__5;
      tokens: StableChunk__6;
    };
   v2:
    record {
      assets: StableChunk__1;
      disburser: StableChunk__2;
      marketplace: StableChunk__3;
      sale: StableChunk__4;
      tokens: StableChunk__6;
    };
 };
type Settlement = 
 record {
   buyer: AccountIdentifier__2;
   buyerFrontend: opt text;
   price: nat64;
   seller: principal;
   sellerFrontend: opt text;
   subaccount: SubAccount__3;
 };
type SaleV1 = 
 record {
   buyer: AccountIdentifier__5;
   expires: Time__2;
   price: nat64;
   slot: opt WhitelistSlot;
   subaccount: SubAccount__1;
   tokens: vec TokenIndex__2;
 };
type SaleTransaction = 
 record {
   buyer: AccountIdentifier__5;
   price: nat64;
   seller: principal;
   time: Time__2;
   tokens: vec TokenIndex__2;
 };
type SaleSettings = 
 record {
   endTime: Time__2;
   openEdition: bool;
   price: nat64;
   remaining: nat;
   salePrice: nat64;
   sold: nat;
   startTime: Time__2;
   totalToSell: nat;
   whitelist: bool;
   whitelistTime: Time__2;
 };
type Sale = 
 record {
   buyer: AccountIdentifier__5;
   expires: Time__2;
   price: nat64;
   subaccount: SubAccount__1;
   tokens: vec TokenIndex__2;
   whitelistName: opt text;
 };
type Result_9 = 
 variant {
   err: CommonError__2;
   ok: AccountIdentifier__7;
 };
type Result_8 = 
 variant {
   err: CommonError__1;
   ok: record {
         AccountIdentifier__2;
         opt Listing;
       };
 };
type Result_7 = 
 variant {
   err: CommonError__1;
   ok: AccountIdentifier__2;
 };
type Result_6 = 
 variant {
   err: CommonError;
   ok: Metadata__1;
 };
type Result_5 = 
 variant {
   err: text;
   ok: record {
         AccountIdentifier__5;
         nat64;
       };
 };
type Result_4 = 
 variant {
   err: text;
   ok;
 };
type Result_3 = 
 variant {
   err: CommonError__1;
   ok;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: Balance__1;
 };
type Result_1 = 
 variant {
   err: CommonError;
   ok: vec TokenIndex;
 };
type Result = 
 variant {
   err: CommonError;
   ok: vec record {
             TokenIndex;
             opt Listing;
             opt blob;
           };
 };
type RemainingSpots = nat;
type NumericEntity = 
 record {
   avg: nat64;
   first: nat64;
   last: nat64;
   max: nat64;
   min: nat64;
 };
type Nanos = nat64;
type MetricsResponse = record {metrics: opt CanisterMetrics;};
type MetricsRequest = record {parameters: GetMetricsParameters;};
type MetricsGranularity = 
 variant {
   daily;
   hourly;
 };
type Metadata__2 = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Metadata__1 = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Metadata = 
 variant {
   fungible:
    record {
      decimals: nat8;
      metadata: opt blob;
      name: text;
      symbol: text;
    };
   nonfungible: record {metadata: opt blob;};
 };
type Memo = blob;
type LogMessagesData = 
 record {
   message: text;
   timeNanos: Nanos;
 };
type Listing = 
 record {
   buyerFrontend: opt text;
   locked: opt Time__1;
   price: nat64;
   seller: principal;
   sellerFrontend: opt text;
 };
type ListRequest = 
 record {
   from_subaccount: opt SubAccount__3;
   frontendIdentifier: opt text;
   price: opt nat64;
   token: TokenIdentifier__1;
 };
type InitArgs = 
 record {
   airdrop: vec AccountIdentifier;
   dutchAuction: opt DutchAuction;
   escrowDelay: opt Duration;
   marketDelay: opt Duration;
   marketplaces: vec record {
                       text;
                       AccountIdentifier;
                       nat64;
                     };
   name: text;
   publicSaleStart: Time;
   restoreEnabled: opt bool;
   revealDelay: Duration;
   royalties: vec record {
                    AccountIdentifier;
                    nat64;
                  };
   sale: variant {
           duration: Duration;
           supply: nat;
         };
   salePrice: nat64;
   salesDistribution: vec record {
                            AccountIdentifier;
                            nat64;
                          };
   singleAssetCollection: opt bool;
   test: opt bool;
   timersInterval: opt Duration;
   whitelists: vec Whitelist;
 };
type HttpStreamingStrategy = variant {
                               Callback:
                                record {
                                  callback: func () -> ();
                                  token: HttpStreamingCallbackToken;
                                };};
type HttpStreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt blob;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt HttpStreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HourlyMetricsData = 
 record {
   canisterCycles: CanisterCyclesAggregatedData;
   canisterHeapMemorySize: CanisterHeapMemoryAggregatedData;
   canisterMemorySize: CanisterMemoryAggregatedData;
   timeMillis: int;
   updateCalls: UpdateCallsAggregatedData;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type GetMetricsParameters = 
 record {
   dateFromMillis: nat;
   dateToMillis: nat;
   granularity: MetricsGranularity;
 };
type GetLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   fromTimeNanos: opt Nanos;
 };
type GetLogMessagesFilter = 
 record {
   analyzeCount: nat32;
   messageContains: opt text;
   messageRegex: opt text;
 };
type GetLatestLogMessagesParameters = 
 record {
   count: nat32;
   filter: opt GetLogMessagesFilter;
   upToTimeNanos: opt Nanos;
 };
type GetInformationResponse = 
 record {
   logs: opt CanisterLogResponse;
   metrics: opt MetricsResponse;
   status: opt StatusResponse;
   version: opt nat;
 };
type GetInformationRequest = 
 record {
   logs: opt CanisterLogRequest;
   metrics: opt MetricsRequest;
   status: opt StatusRequest;
   version: bool;
 };
type Frontend = 
 record {
   accountIdentifier: AccountIdentifier__2;
   fee: nat64;
 };
type File = 
 record {
   ctype: text;
   data: vec blob;
 };
type Extension = text;
type DutchAuction = 
 record {
   interval: Time;
   intervalPriceDrop: nat64;
   reservePrice: nat64;
   startPrice: nat64;
   target: variant {
             everyone;
             publicSale;
             whitelist;
           };
 };
type Duration = 
 variant {
   days: nat;
   hours: nat;
   minutes: nat;
   nanoseconds: nat;
   none;
   seconds: nat;
 };
type Disbursement = 
 record {
   amount: nat64;
   fromSubaccount: SubAccount__2;
   to: AccountIdentifier__6;
   tokenIndex: TokenIndex__3;
 };
type DailyMetricsData = 
 record {
   canisterCycles: NumericEntity;
   canisterHeapMemorySize: NumericEntity;
   canisterMemorySize: NumericEntity;
   timeMillis: int;
   updateCalls: nat64;
 };
type CommonError__3 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError__2 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError__1 = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CollectMetricsRequestType = 
 variant {
   force;
   normal;
 };
type CanisterMetricsData = 
 variant {
   daily: vec DailyMetricsData;
   hourly: vec HourlyMetricsData;
 };
type CanisterMetrics = record {data: CanisterMetricsData;};
type CanisterMemoryAggregatedData = vec nat64;
type CanisterLogResponse = 
 variant {
   messages: CanisterLogMessages;
   messagesInfo: CanisterLogMessagesInfo;
 };
type CanisterLogRequest = 
 variant {
   getLatestMessages: GetLatestLogMessagesParameters;
   getMessages: GetLogMessagesParameters;
   getMessagesInfo;
 };
type CanisterLogMessagesInfo = 
 record {
   count: nat32;
   features: vec opt CanisterLogFeature;
   firstTimeNanos: opt Nanos;
   lastTimeNanos: opt Nanos;
 };
type CanisterLogMessages = 
 record {
   data: vec LogMessagesData;
   lastAnalyzedMessageTimeNanos: opt Nanos;
 };
type CanisterLogFeature = 
 variant {
   filterMessageByContains;
   filterMessageByRegex;
 };
type CanisterHeapMemoryAggregatedData = vec nat64;
type CanisterCyclesAggregatedData = vec nat64;
type Canister = 
 service {
   acceptCycles: () -> ();
   addAssets: (vec AssetV2) -> (nat);
   addPlaceholder: (AssetV2) -> ();
   airdropTokens: () -> ();
   allSettlements: () -> (vec record {
                                TokenIndex__1;
                                Settlement;
                              }) query;
   availableCycles: () -> (nat) query;
   backupChunk: (nat, nat) -> (StableChunk) query;
   balance: (BalanceRequest) -> (BalanceResponse) query;
   bearer: (TokenIdentifier__3) -> (Result_9) query;
   cronDisbursements: () -> ();
   cronFailedSales: () -> ();
   cronSalesSettlements: () -> ();
   cronSettlements: () -> ();
   details: (TokenIdentifier__1) -> (Result_8) query;
   enableSale: () -> (nat);
   extensions: () -> (vec Extension) query;
   failedSales: () ->
    (vec record {
           AccountIdentifier__5;
           SubAccount__1;
         }) query;
   frontends: () -> (vec record {
                           text;
                           Frontend;
                         });
   getCanistergeekInformation: (GetInformationRequest) ->
    (GetInformationResponse) query;
   getChunkCount: (nat) -> (nat) query;
   getDisbursements: () -> (vec Disbursement) query;
   getMinter: () -> (principal) query;
   getRegistry: () -> (vec record {
                             TokenIndex;
                             AccountIdentifier__3;
                           }) query;
   getTokenToAssetMapping: () -> (vec record {
                                        TokenIndex;
                                        text;
                                      }) query;
   getTokens: () -> (vec record {
                           TokenIndex;
                           Metadata__1;
                         }) query;
   grow: (nat) -> (nat);
   http_request: (HttpRequest) -> (HttpResponse) query;
   initCap: () -> (Result_4);
   initMint: () -> (Result_4);
   list: (ListRequest) -> (Result_3);
   listings: () -> (vec record {
                          TokenIndex__1;
                          Listing;
                          Metadata__2;
                        }) query;
   lock: (TokenIdentifier__1, nat64, AccountIdentifier__2, SubAccount__3,
    opt text) -> (Result_7);
   metadata: (TokenIdentifier__2) -> (Result_6) query;
   pendingCronJobs: () ->
    (record {
       disbursements: nat;
       failedSettlements: nat;
     }) query;
   reserve: (AccountIdentifier__5) -> (Result_5);
   restoreChunk: (StableChunk) -> ();
   retrieve: (AccountIdentifier__5) -> (Result_4);
   saleTransactions: () -> (vec SaleTransaction) query;
   salesSettings: (AccountIdentifier__4) -> (SaleSettings) query;
   salesSettlements: () -> (vec record {
                                  AccountIdentifier__5;
                                  Sale;
                                }) query;
   settle: (TokenIdentifier__1) -> (Result_3);
   settlements: () ->
    (vec record {
           TokenIndex__1;
           AccountIdentifier__2;
           nat64;
         }) query;
   shuffleTokensForSale: () -> ();
   stats: () -> (nat64, nat64, nat64, nat64, nat, nat, nat) query;
   supply: () -> (Result_2) query;
   toAccountIdentifier: (text, nat) -> (AccountIdentifier__4) query;
   tokens: (AccountIdentifier__3) -> (Result_1) query;
   tokens_ext: (AccountIdentifier__3) -> (Result) query;
   transactions: () -> (vec TransactionV2) query;
   transactionsPaged: (nat, nat) -> (vec Transaction, nat) query;
   transfer: (TransferRequest) -> (TransferResponse);
   updateCanistergeekInformation: (UpdateInformationRequest) -> ();
 };
type Balance__2 = nat;
type Balance__1 = nat;
type BalanceResponse = 
 variant {
   err: CommonError__3;
   ok: Balance;
 };
type BalanceRequest = 
 record {
   token: TokenIdentifier;
   user: User;
 };
type Balance = nat;
type AssetV2 = 
 record {
   metadata: opt File;
   name: text;
   payload: File;
   payloadUrl: opt text;
   thumbnail: opt File;
   thumbnailUrl: opt text;
 };
type AccountIdentifier__7 = text;
type AccountIdentifier__6 = text;
type AccountIdentifier__5 = text;
type AccountIdentifier__4 = text;
type AccountIdentifier__3 = text;
type AccountIdentifier__2 = text;
type AccountIdentifier__1 = text;
type AccountIdentifier = text;
service : (principal, InitArgs) -> Canister
